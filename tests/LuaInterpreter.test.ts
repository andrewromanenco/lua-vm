import LuaInterpreter from "@src/LuaInterpreter";
import {

Start_Context,
ChunkContext,
BlockContext,
Stat_no_opContext,
Stat_assing_varsContext,
Stat_function_callContext,
Stat_labelContext,
Stat_breakContext,
Stat_gotoContext,
Stat_doContext,
Stat_whileContext,
Stat_repeatContext,
Stat_ifContext,
Stat_for_varContext,
Stat_for_listContext,
Stat_functionContext,
Stat_local_functionContext,
Stat_local_attnamelistContext,
AttnamelistContext,
AttribContext,
RetstatContext,
LabelContext,
FuncnameContext,
VarlistContext,
NamelistContext,
ExplistContext,
Exp_trueContext,
Exp_bitsContext,
Exp_andContext,
Exp_stringContext,
Exp_arithmetic_highContext,
Exp_relContext,
Stat_table_construnctorContext,
Exp_unaryContext,
Exp_orContext,
Exp_falseContext,
Stat_prefix_expContext,
Exp_exponentContext,
Exp_concatContext,
Exp_varargContext,
Exp_arithmetic_lowContext,
Exp_function_defContext,
Exp_nilContext,
Var_nameContext,
Var_expContext,
Prefixexp_nameContext,
Prefixexp_function_callContext,
Prefixexp_expContext,
Fcall_nameContext,
Fcall_name_extContext,
Fcall_function_callContext,
Fcall_expContext,
Fcall_exp_extContext,
Fcall_function_call_extContext,
Args_exp_listContext,
Args_table_constructorContext,
Args_stringContext,
FunctiondefContext,
FuncbodyContext,
Parlist_namellistContext,
Parlist_varargContext,
Parlist_noneContext,
TableconstructorContext,
FieldlistContext,
Field_exp_expContext,
Field_name_expContext,
Field_expContext,
FieldsepContext,
Number_hexContext,
Number_floatContext,
Number_hex_floatContext,
String_stringContext,
String_charstringContext,
String_longstringContext
} from "@src/parser/LuaParser";

describe("LuaInterpreter", () => {
const interpreter = new LuaInterpreter();

const contexts = [
    { method: "visitStart_", context: Start_Context },
    { method: "visitChunk", context: ChunkContext },
    { method: "visitBlock", context: BlockContext },
    { method: "visitStat_no_op", context: Stat_no_opContext },
    { method: "visitStat_assing_vars", context: Stat_assing_varsContext },
    { method: "visitStat_function_call", context: Stat_function_callContext },
    { method: "visitStat_label", context: Stat_labelContext },
    { method: "visitStat_break", context: Stat_breakContext },
    { method: "visitStat_goto", context: Stat_gotoContext },
    { method: "visitStat_do", context: Stat_doContext },
    { method: "visitStat_while", context: Stat_whileContext },
    { method: "visitStat_repeat", context: Stat_repeatContext },
    { method: "visitStat_if", context: Stat_ifContext },
    { method: "visitStat_for_var", context: Stat_for_varContext },
    { method: "visitStat_for_list", context: Stat_for_listContext },
    { method: "visitStat_function", context: Stat_functionContext },
    { method: "visitStat_local_function", context: Stat_local_functionContext },
    { method: "visitStat_local_attnamelist", context: Stat_local_attnamelistContext },
    { method: "visitAttnamelist", context: AttnamelistContext },
    { method: "visitAttrib", context: AttribContext },
    { method: "visitRetstat", context: RetstatContext },
    { method: "visitLabel", context: LabelContext },
    { method: "visitFuncname", context: FuncnameContext },
    { method: "visitVarlist", context: VarlistContext },
    { method: "visitNamelist", context: NamelistContext },
    { method: "visitExplist", context: ExplistContext },
    { method: "visitExp_true", context: Exp_trueContext },
    { method: "visitExp_bits", context: Exp_bitsContext },
    { method: "visitExp_and", context: Exp_andContext },
    { method: "visitExp_string", context: Exp_stringContext },
    { method: "visitExp_arithmetic_high", context: Exp_arithmetic_highContext },
    { method: "visitExp_rel", context: Exp_relContext },
    { method: "visitStat_table_construnctor", context: Stat_table_construnctorContext },
    { method: "visitExp_unary", context: Exp_unaryContext },
    { method: "visitExp_or", context: Exp_orContext },
    { method: "visitExp_false", context: Exp_falseContext },
    { method: "visitStat_prefix_exp", context: Stat_prefix_expContext },
    { method: "visitExp_exponent", context: Exp_exponentContext },
    { method: "visitExp_concat", context: Exp_concatContext },
    { method: "visitExp_vararg", context: Exp_varargContext },
    { method: "visitExp_arithmetic_low", context: Exp_arithmetic_lowContext },
    { method: "visitExp_function_def", context: Exp_function_defContext },
    { method: "visitExp_nil", context: Exp_nilContext },
    { method: "visitVar_name", context: Var_nameContext },
    { method: "visitVar_exp", context: Var_expContext },
    { method: "visitPrefixexp_name", context: Prefixexp_nameContext },
    { method: "visitPrefixexp_function_call", context: Prefixexp_function_callContext },
    { method: "visitPrefixexp_exp", context: Prefixexp_expContext },
    { method: "visitFcall_name", context: Fcall_nameContext },
    { method: "visitFcall_name_ext", context: Fcall_name_extContext },
    { method: "visitFcall_function_call", context: Fcall_function_callContext },
    { method: "visitFcall_exp", context: Fcall_expContext },
    { method: "visitFcall_exp_ext", context: Fcall_exp_extContext },
    { method: "visitFcall_function_call_ext", context: Fcall_function_call_extContext },
    { method: "visitArgs_exp_list", context: Args_exp_listContext },
    { method: "visitArgs_table_constructor", context: Args_table_constructorContext },
    { method: "visitArgs_string", context: Args_stringContext },
    { method: "visitFunctiondef", context: FunctiondefContext },
    { method: "visitFuncbody", context: FuncbodyContext },
    { method: "visitParlist_namellist", context: Parlist_namellistContext },
    { method: "visitParlist_vararg", context: Parlist_varargContext },
    { method: "visitParlist_none", context: Parlist_noneContext },
    { method: "visitTableconstructor", context: TableconstructorContext },
    { method: "visitFieldlist", context: FieldlistContext },
    { method: "visitField_exp_exp", context: Field_exp_expContext },
    { method: "visitField_name_exp", context: Field_name_expContext },
    { method: "visitField_exp", context: Field_expContext },
    { method: "visitFieldsep", context: FieldsepContext },
    { method: "visitNumber_hex", context: Number_hexContext },
    { method: "visitNumber_float", context: Number_floatContext },
    { method: "visitNumber_hex_float", context: Number_hex_floatContext },
    { method: "visitString_string", context: String_stringContext },
    { method: "visitString_charstring", context: String_charstringContext },
    { method: "visitString_longstring", context: String_longstringContext }
];

contexts.forEach(({ method, context }) => {
    test(`${method} throws an error`, () => {
        const ctx = {} as unknown as InstanceType<typeof context>;
        expect(() => (interpreter as any)[method](ctx)).toThrow("Not Implemented");
    });
});
});
